/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-responsive";
exports.ids = ["vendor-chunks/react-responsive"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-responsive/dist/react-responsive.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-responsive/dist/react-responsive.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n    if (true) module.exports = factory(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\n    else {}\n})(this, (__WEBPACK_EXTERNAL_MODULE_react__)=>{\n    return /******/ (()=>{\n        /******/ var __webpack_modules__ = {\n            /***/ \"./node_modules/css-mediaquery/index.js\": /*!**********************************************!*\\\n  !*** ./node_modules/css-mediaquery/index.js ***!\n  \\**********************************************/ /***/ (__unused_webpack_module, exports1)=>{\n                \"use strict\";\n                /*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/ exports1.match = matchQuery;\n                exports1.parse = parseQuery;\n                // -----------------------------------------------------------------------------\n                var RE_MEDIA_QUERY = /(?:(only|not)?\\s*([^\\s\\(\\)]+)(?:\\s*and)?\\s*)?(.+)?/i, RE_MQ_EXPRESSION = /\\(\\s*([^\\s\\:\\)]+)\\s*(?:\\:\\s*([^\\s\\)]+))?\\s*\\)/, RE_MQ_FEATURE = /^(?:(min|max)-)?(.+)/, RE_LENGTH_UNIT = /(em|rem|px|cm|mm|in|pt|pc)?$/, RE_RESOLUTION_UNIT = /(dpi|dpcm|dppx)?$/;\n                function matchQuery(mediaQuery, values) {\n                    return parseQuery(mediaQuery).some(function(query) {\n                        var inverse = query.inverse;\n                        // Either the parsed or specified `type` is \"all\", or the types must be\n                        // equal for a match.\n                        var typeMatch = query.type === \"all\" || values.type === query.type;\n                        // Quit early when `type` doesn't match, but take \"not\" into account.\n                        if (typeMatch && inverse || !(typeMatch || inverse)) {\n                            return false;\n                        }\n                        var expressionsMatch = query.expressions.every(function(expression) {\n                            var feature = expression.feature, modifier = expression.modifier, expValue = expression.value, value = values[feature];\n                            // Missing or falsy values don't match.\n                            if (!value) {\n                                return false;\n                            }\n                            switch(feature){\n                                case \"orientation\":\n                                case \"scan\":\n                                    return value.toLowerCase() === expValue.toLowerCase();\n                                case \"width\":\n                                case \"height\":\n                                case \"device-width\":\n                                case \"device-height\":\n                                    expValue = toPx(expValue);\n                                    value = toPx(value);\n                                    break;\n                                case \"resolution\":\n                                    expValue = toDpi(expValue);\n                                    value = toDpi(value);\n                                    break;\n                                case \"aspect-ratio\":\n                                case \"device-aspect-ratio\":\n                                case /* Deprecated */ \"device-pixel-ratio\":\n                                    expValue = toDecimal(expValue);\n                                    value = toDecimal(value);\n                                    break;\n                                case \"grid\":\n                                case \"color\":\n                                case \"color-index\":\n                                case \"monochrome\":\n                                    expValue = parseInt(expValue, 10) || 1;\n                                    value = parseInt(value, 10) || 0;\n                                    break;\n                            }\n                            switch(modifier){\n                                case \"min\":\n                                    return value >= expValue;\n                                case \"max\":\n                                    return value <= expValue;\n                                default:\n                                    return value === expValue;\n                            }\n                        });\n                        return expressionsMatch && !inverse || !expressionsMatch && inverse;\n                    });\n                }\n                function parseQuery(mediaQuery) {\n                    return mediaQuery.split(\",\").map(function(query) {\n                        query = query.trim();\n                        var captures = query.match(RE_MEDIA_QUERY), modifier = captures[1], type = captures[2], expressions = captures[3] || \"\", parsed = {};\n                        parsed.inverse = !!modifier && modifier.toLowerCase() === \"not\";\n                        parsed.type = type ? type.toLowerCase() : \"all\";\n                        // Split expressions into a list.\n                        expressions = expressions.match(/\\([^\\)]+\\)/g) || [];\n                        parsed.expressions = expressions.map(function(expression) {\n                            var captures = expression.match(RE_MQ_EXPRESSION), feature = captures[1].toLowerCase().match(RE_MQ_FEATURE);\n                            return {\n                                modifier: feature[1],\n                                feature: feature[2],\n                                value: captures[2]\n                            };\n                        });\n                        return parsed;\n                    });\n                }\n                // -- Utilities ----------------------------------------------------------------\n                function toDecimal(ratio) {\n                    var decimal = Number(ratio), numbers;\n                    if (!decimal) {\n                        numbers = ratio.match(/^(\\d+)\\s*\\/\\s*(\\d+)$/);\n                        decimal = numbers[1] / numbers[2];\n                    }\n                    return decimal;\n                }\n                function toDpi(resolution) {\n                    var value = parseFloat(resolution), units = String(resolution).match(RE_RESOLUTION_UNIT)[1];\n                    switch(units){\n                        case \"dpcm\":\n                            return value / 2.54;\n                        case \"dppx\":\n                            return value * 96;\n                        default:\n                            return value;\n                    }\n                }\n                function toPx(length) {\n                    var value = parseFloat(length), units = String(length).match(RE_LENGTH_UNIT)[1];\n                    switch(units){\n                        case \"em\":\n                            return value * 16;\n                        case \"rem\":\n                            return value * 16;\n                        case \"cm\":\n                            return value * 96 / 2.54;\n                        case \"mm\":\n                            return value * 96 / 2.54 / 10;\n                        case \"in\":\n                            return value * 96;\n                        case \"pt\":\n                            return value * 72;\n                        case \"pc\":\n                            return value * 72 / 12;\n                        default:\n                            return value;\n                    }\n                }\n            /***/ },\n            /***/ \"./node_modules/hyphenate-style-name/index.js\": /*!****************************************************!*\\\n  !*** ./node_modules/hyphenate-style-name/index.js ***!\n  \\****************************************************/ /***/ (__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_7986__)=>{\n                \"use strict\";\n                __nested_webpack_require_7986__.r(__nested_webpack_exports__);\n                /* harmony export */ __nested_webpack_require_7986__.d(__nested_webpack_exports__, {\n                    /* harmony export */ \"default\": ()=>__WEBPACK_DEFAULT_EXPORT__\n                });\n                /* eslint-disable no-var, prefer-template */ var uppercasePattern = /[A-Z]/g;\n                var msPattern = /^ms-/;\n                var cache = {};\n                function toHyphenLower(match) {\n                    return \"-\" + match.toLowerCase();\n                }\n                function hyphenateStyleName(name) {\n                    if (cache.hasOwnProperty(name)) {\n                        return cache[name];\n                    }\n                    var hName = name.replace(uppercasePattern, toHyphenLower);\n                    return cache[name] = msPattern.test(hName) ? \"-\" + hName : hName;\n                }\n                /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = hyphenateStyleName;\n            /***/ },\n            /***/ \"./node_modules/matchmediaquery/index.js\": /*!***********************************************!*\\\n  !*** ./node_modules/matchmediaquery/index.js ***!\n  \\***********************************************/ /***/ (module1, __unused_webpack_exports, __nested_webpack_require_9308__)=>{\n                \"use strict\";\n                var staticMatch = __nested_webpack_require_9308__(/*! css-mediaquery */ \"./node_modules/css-mediaquery/index.js\").match;\n                var dynamicMatch =  false ? 0 : null;\n                // our fake MediaQueryList\n                function Mql(query, values, forceStatic) {\n                    var self = this;\n                    if (dynamicMatch && !forceStatic) {\n                        var mql = dynamicMatch.call(window, query);\n                        this.matches = mql.matches;\n                        this.media = mql.media;\n                        // TODO: is there a time it makes sense to remove this listener?\n                        mql.addListener(update);\n                    } else {\n                        this.matches = staticMatch(query, values);\n                        this.media = query;\n                    }\n                    this.addListener = addListener;\n                    this.removeListener = removeListener;\n                    this.dispose = dispose;\n                    function addListener(listener) {\n                        if (mql) {\n                            mql.addListener(listener);\n                        }\n                    }\n                    function removeListener(listener) {\n                        if (mql) {\n                            mql.removeListener(listener);\n                        }\n                    }\n                    // update ourselves!\n                    function update(evt) {\n                        self.matches = evt.matches;\n                        self.media = evt.media;\n                    }\n                    function dispose() {\n                        if (mql) {\n                            mql.removeListener(update);\n                        }\n                    }\n                }\n                function matchMedia(query, values, forceStatic) {\n                    return new Mql(query, values, forceStatic);\n                }\n                module1.exports = matchMedia;\n            /***/ },\n            /***/ \"./node_modules/object-assign/index.js\": /*!*********************************************!*\\\n  !*** ./node_modules/object-assign/index.js ***!\n  \\*********************************************/ /***/ (module1)=>{\n                \"use strict\";\n                /*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/ /* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n                var hasOwnProperty = Object.prototype.hasOwnProperty;\n                var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n                function toObject(val) {\n                    if (val === null || val === undefined) {\n                        throw new TypeError(\"Object.assign cannot be called with null or undefined\");\n                    }\n                    return Object(val);\n                }\n                function shouldUseNative() {\n                    try {\n                        if (!Object.assign) {\n                            return false;\n                        }\n                        // Detect buggy property enumeration order in older V8 versions.\n                        // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n                        var test1 = new String(\"abc\"); // eslint-disable-line no-new-wrappers\n                        test1[5] = \"de\";\n                        if (Object.getOwnPropertyNames(test1)[0] === \"5\") {\n                            return false;\n                        }\n                        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n                        var test2 = {};\n                        for(var i = 0; i < 10; i++){\n                            test2[\"_\" + String.fromCharCode(i)] = i;\n                        }\n                        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {\n                            return test2[n];\n                        });\n                        if (order2.join(\"\") !== \"0123456789\") {\n                            return false;\n                        }\n                        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n                        var test3 = {};\n                        \"abcdefghijklmnopqrst\".split(\"\").forEach(function(letter) {\n                            test3[letter] = letter;\n                        });\n                        if (Object.keys(Object.assign({}, test3)).join(\"\") !== \"abcdefghijklmnopqrst\") {\n                            return false;\n                        }\n                        return true;\n                    } catch (err) {\n                        // We don't expect any of the above to throw, but better to be safe.\n                        return false;\n                    }\n                }\n                module1.exports = shouldUseNative() ? Object.assign : function(target, source) {\n                    var from;\n                    var to = toObject(target);\n                    var symbols;\n                    for(var s = 1; s < arguments.length; s++){\n                        from = Object(arguments[s]);\n                        for(var key in from){\n                            if (hasOwnProperty.call(from, key)) {\n                                to[key] = from[key];\n                            }\n                        }\n                        if (getOwnPropertySymbols) {\n                            symbols = getOwnPropertySymbols(from);\n                            for(var i = 0; i < symbols.length; i++){\n                                if (propIsEnumerable.call(from, symbols[i])) {\n                                    to[symbols[i]] = from[symbols[i]];\n                                }\n                            }\n                        }\n                    }\n                    return to;\n                };\n            /***/ },\n            /***/ \"./node_modules/prop-types/checkPropTypes.js\": /*!***************************************************!*\\\n  !*** ./node_modules/prop-types/checkPropTypes.js ***!\n  \\***************************************************/ /***/ (module1, __unused_webpack_exports, __nested_webpack_require_15494__)=>{\n                \"use strict\";\n                /**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var printWarning = function() {};\n                if (true) {\n                    var ReactPropTypesSecret = __nested_webpack_require_15494__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n                    var loggedTypeFailures = {};\n                    var has = __nested_webpack_require_15494__(/*! ./lib/has */ \"./node_modules/prop-types/lib/has.js\");\n                    printWarning = function(text) {\n                        var message = \"Warning: \" + text;\n                        if (typeof console !== \"undefined\") {\n                            console.error(message);\n                        }\n                        try {\n                            // --- Welcome to debugging React ---\n                            // This error was thrown as a convenience so that you can use this stack\n                            // to find the callsite that caused this warning to fire.\n                            throw new Error(message);\n                        } catch (x) {}\n                    };\n                }\n                /**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n                    if (true) {\n                        for(var typeSpecName in typeSpecs){\n                            if (has(typeSpecs, typeSpecName)) {\n                                var error;\n                                // Prop type validation may throw. In case they do, we don't want to\n                                // fail the render phase where it didn't fail before. So we log it.\n                                // After these have been cleaned up, we'll let them throw.\n                                try {\n                                    // This is intentionally an invariant that gets caught. It's the same\n                                    // behavior as without this statement except with a better message.\n                                    if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                        var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                        err.name = \"Invariant Violation\";\n                                        throw err;\n                                    }\n                                    error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n                                } catch (ex) {\n                                    error = ex;\n                                }\n                                if (error && !(error instanceof Error)) {\n                                    printWarning((componentName || \"React class\") + \": type specification of \" + location + \" `\" + typeSpecName + \"` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a \" + typeof error + \". \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\");\n                                }\n                                if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n                                    // Only monitor this failure once because there tends to be a lot of the\n                                    // same error.\n                                    loggedTypeFailures[error.message] = true;\n                                    var stack = getStack ? getStack() : \"\";\n                                    printWarning(\"Failed \" + location + \" type: \" + error.message + (stack != null ? stack : \"\"));\n                                }\n                            }\n                        }\n                    }\n                }\n                /**\n * Resets warning cache when testing.\n *\n * @private\n */ checkPropTypes.resetWarningCache = function() {\n                    if (true) {\n                        loggedTypeFailures = {};\n                    }\n                };\n                module1.exports = checkPropTypes;\n            /***/ },\n            /***/ \"./node_modules/prop-types/factoryWithTypeCheckers.js\": /*!************************************************************!*\\\n  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!\n  \\************************************************************/ /***/ (module1, __unused_webpack_exports, __nested_webpack_require_20851__)=>{\n                \"use strict\";\n                /**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var ReactIs = __nested_webpack_require_20851__(/*! react-is */ \"./node_modules/react-is/index.js\");\n                var assign = __nested_webpack_require_20851__(/*! object-assign */ \"./node_modules/object-assign/index.js\");\n                var ReactPropTypesSecret = __nested_webpack_require_20851__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n                var has = __nested_webpack_require_20851__(/*! ./lib/has */ \"./node_modules/prop-types/lib/has.js\");\n                var checkPropTypes = __nested_webpack_require_20851__(/*! ./checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");\n                var printWarning = function() {};\n                if (true) {\n                    printWarning = function(text) {\n                        var message = \"Warning: \" + text;\n                        if (typeof console !== \"undefined\") {\n                            console.error(message);\n                        }\n                        try {\n                            // --- Welcome to debugging React ---\n                            // This error was thrown as a convenience so that you can use this stack\n                            // to find the callsite that caused this warning to fire.\n                            throw new Error(message);\n                        } catch (x) {}\n                    };\n                }\n                function emptyFunctionThatReturnsNull() {\n                    return null;\n                }\n                module1.exports = function(isValidElement, throwOnDirectAccess) {\n                    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === \"function\" && Symbol.iterator;\n                    var FAUX_ITERATOR_SYMBOL = \"@@iterator\"; // Before Symbol spec.\n                    /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */ function getIteratorFn(maybeIterable) {\n                        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n                        if (typeof iteratorFn === \"function\") {\n                            return iteratorFn;\n                        }\n                    }\n                    /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */ var ANONYMOUS = \"<<anonymous>>\";\n                    // Important!\n                    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n                    var ReactPropTypes = {\n                        array: createPrimitiveTypeChecker(\"array\"),\n                        bigint: createPrimitiveTypeChecker(\"bigint\"),\n                        bool: createPrimitiveTypeChecker(\"boolean\"),\n                        func: createPrimitiveTypeChecker(\"function\"),\n                        number: createPrimitiveTypeChecker(\"number\"),\n                        object: createPrimitiveTypeChecker(\"object\"),\n                        string: createPrimitiveTypeChecker(\"string\"),\n                        symbol: createPrimitiveTypeChecker(\"symbol\"),\n                        any: createAnyTypeChecker(),\n                        arrayOf: createArrayOfTypeChecker,\n                        element: createElementTypeChecker(),\n                        elementType: createElementTypeTypeChecker(),\n                        instanceOf: createInstanceTypeChecker,\n                        node: createNodeChecker(),\n                        objectOf: createObjectOfTypeChecker,\n                        oneOf: createEnumTypeChecker,\n                        oneOfType: createUnionTypeChecker,\n                        shape: createShapeTypeChecker,\n                        exact: createStrictShapeTypeChecker\n                    };\n                    /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */ /*eslint-disable no-self-compare*/ function is(x, y) {\n                        // SameValue algorithm\n                        if (x === y) {\n                            // Steps 1-5, 7-10\n                            // Steps 6.b-6.e: +0 != -0\n                            return x !== 0 || 1 / x === 1 / y;\n                        } else {\n                            // Step 6.a: NaN == NaN\n                            return x !== x && y !== y;\n                        }\n                    }\n                    /*eslint-enable no-self-compare*/ /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */ function PropTypeError(message, data) {\n                        this.message = message;\n                        this.data = data && typeof data === \"object\" ? data : {};\n                        this.stack = \"\";\n                    }\n                    // Make `instanceof Error` still work for returned errors.\n                    PropTypeError.prototype = Error.prototype;\n                    function createChainableTypeChecker(validate) {\n                        if (true) {\n                            var manualPropTypeCallCache = {};\n                            var manualPropTypeWarningCount = 0;\n                        }\n                        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n                            componentName = componentName || ANONYMOUS;\n                            propFullName = propFullName || propName;\n                            if (secret !== ReactPropTypesSecret) {\n                                if (throwOnDirectAccess) {\n                                    // New behavior only for users of `prop-types` package\n                                    var err = new Error(\"Calling PropTypes validators directly is not supported by the `prop-types` package. \" + \"Use `PropTypes.checkPropTypes()` to call them. \" + \"Read more at http://fb.me/use-check-prop-types\");\n                                    err.name = \"Invariant Violation\";\n                                    throw err;\n                                } else if ( true && typeof console !== \"undefined\") {\n                                    // Old behavior for people using React.PropTypes\n                                    var cacheKey = componentName + \":\" + propName;\n                                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors\n                                    manualPropTypeWarningCount < 3) {\n                                        printWarning(\"You are manually calling a React.PropTypes validation \" + \"function for the `\" + propFullName + \"` prop on `\" + componentName + \"`. This is deprecated \" + \"and will throw in the standalone `prop-types` package. \" + \"You may be seeing this warning due to a third-party PropTypes \" + \"library. See https://fb.me/react-warning-dont-call-proptypes \" + \"for details.\");\n                                        manualPropTypeCallCache[cacheKey] = true;\n                                        manualPropTypeWarningCount++;\n                                    }\n                                }\n                            }\n                            if (props[propName] == null) {\n                                if (isRequired) {\n                                    if (props[propName] === null) {\n                                        return new PropTypeError(\"The \" + location + \" `\" + propFullName + \"` is marked as required \" + (\"in `\" + componentName + \"`, but its value is `null`.\"));\n                                    }\n                                    return new PropTypeError(\"The \" + location + \" `\" + propFullName + \"` is marked as required in \" + (\"`\" + componentName + \"`, but its value is `undefined`.\"));\n                                }\n                                return null;\n                            } else {\n                                return validate(props, propName, componentName, location, propFullName);\n                            }\n                        }\n                        var chainedCheckType = checkType.bind(null, false);\n                        chainedCheckType.isRequired = checkType.bind(null, true);\n                        return chainedCheckType;\n                    }\n                    function createPrimitiveTypeChecker(expectedType) {\n                        function validate(props, propName, componentName, location, propFullName, secret) {\n                            var propValue = props[propName];\n                            var propType = getPropType(propValue);\n                            if (propType !== expectedType) {\n                                // `propValue` being instance of, say, date/regexp, pass the 'object'\n                                // check, but we can offer a more precise error message here rather than\n                                // 'of type `object`'.\n                                var preciseType = getPreciseType(propValue);\n                                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + preciseType + \"` supplied to `\" + componentName + \"`, expected \") + (\"`\" + expectedType + \"`.\"), {\n                                    expectedType: expectedType\n                                });\n                            }\n                            return null;\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function createAnyTypeChecker() {\n                        return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n                    }\n                    function createArrayOfTypeChecker(typeChecker) {\n                        function validate(props, propName, componentName, location, propFullName) {\n                            if (typeof typeChecker !== \"function\") {\n                                return new PropTypeError(\"Property `\" + propFullName + \"` of component `\" + componentName + \"` has invalid PropType notation inside arrayOf.\");\n                            }\n                            var propValue = props[propName];\n                            if (!Array.isArray(propValue)) {\n                                var propType = getPropType(propValue);\n                                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an array.\"));\n                            }\n                            for(var i = 0; i < propValue.length; i++){\n                                var error = typeChecker(propValue, i, componentName, location, propFullName + \"[\" + i + \"]\", ReactPropTypesSecret);\n                                if (error instanceof Error) {\n                                    return error;\n                                }\n                            }\n                            return null;\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function createElementTypeChecker() {\n                        function validate(props, propName, componentName, location, propFullName) {\n                            var propValue = props[propName];\n                            if (!isValidElement(propValue)) {\n                                var propType = getPropType(propValue);\n                                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected a single ReactElement.\"));\n                            }\n                            return null;\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function createElementTypeTypeChecker() {\n                        function validate(props, propName, componentName, location, propFullName) {\n                            var propValue = props[propName];\n                            if (!ReactIs.isValidElementType(propValue)) {\n                                var propType = getPropType(propValue);\n                                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected a single ReactElement type.\"));\n                            }\n                            return null;\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function createInstanceTypeChecker(expectedClass) {\n                        function validate(props, propName, componentName, location, propFullName) {\n                            if (!(props[propName] instanceof expectedClass)) {\n                                var expectedClassName = expectedClass.name || ANONYMOUS;\n                                var actualClassName = getClassName(props[propName]);\n                                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + actualClassName + \"` supplied to `\" + componentName + \"`, expected \") + (\"instance of `\" + expectedClassName + \"`.\"));\n                            }\n                            return null;\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function createEnumTypeChecker(expectedValues) {\n                        if (!Array.isArray(expectedValues)) {\n                            if (true) {\n                                if (arguments.length > 1) {\n                                    printWarning(\"Invalid arguments supplied to oneOf, expected an array, got \" + arguments.length + \" arguments. \" + \"A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).\");\n                                } else {\n                                    printWarning(\"Invalid argument supplied to oneOf, expected an array.\");\n                                }\n                            }\n                            return emptyFunctionThatReturnsNull;\n                        }\n                        function validate(props, propName, componentName, location, propFullName) {\n                            var propValue = props[propName];\n                            for(var i = 0; i < expectedValues.length; i++){\n                                if (is(propValue, expectedValues[i])) {\n                                    return null;\n                                }\n                            }\n                            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n                                var type = getPreciseType(value);\n                                if (type === \"symbol\") {\n                                    return String(value);\n                                }\n                                return value;\n                            });\n                            return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of value `\" + String(propValue) + \"` \" + (\"supplied to `\" + componentName + \"`, expected one of \" + valuesString + \".\"));\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function createObjectOfTypeChecker(typeChecker) {\n                        function validate(props, propName, componentName, location, propFullName) {\n                            if (typeof typeChecker !== \"function\") {\n                                return new PropTypeError(\"Property `\" + propFullName + \"` of component `\" + componentName + \"` has invalid PropType notation inside objectOf.\");\n                            }\n                            var propValue = props[propName];\n                            var propType = getPropType(propValue);\n                            if (propType !== \"object\") {\n                                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an object.\"));\n                            }\n                            for(var key in propValue){\n                                if (has(propValue, key)) {\n                                    var error = typeChecker(propValue, key, componentName, location, propFullName + \".\" + key, ReactPropTypesSecret);\n                                    if (error instanceof Error) {\n                                        return error;\n                                    }\n                                }\n                            }\n                            return null;\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function createUnionTypeChecker(arrayOfTypeCheckers) {\n                        if (!Array.isArray(arrayOfTypeCheckers)) {\n                             true ? printWarning(\"Invalid argument supplied to oneOfType, expected an instance of array.\") : 0;\n                            return emptyFunctionThatReturnsNull;\n                        }\n                        for(var i = 0; i < arrayOfTypeCheckers.length; i++){\n                            var checker = arrayOfTypeCheckers[i];\n                            if (typeof checker !== \"function\") {\n                                printWarning(\"Invalid argument supplied to oneOfType. Expected an array of check functions, but \" + \"received \" + getPostfixForTypeWarning(checker) + \" at index \" + i + \".\");\n                                return emptyFunctionThatReturnsNull;\n                            }\n                        }\n                        function validate(props, propName, componentName, location, propFullName) {\n                            var expectedTypes = [];\n                            for(var i = 0; i < arrayOfTypeCheckers.length; i++){\n                                var checker = arrayOfTypeCheckers[i];\n                                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);\n                                if (checkerResult == null) {\n                                    return null;\n                                }\n                                if (checkerResult.data && has(checkerResult.data, \"expectedType\")) {\n                                    expectedTypes.push(checkerResult.data.expectedType);\n                                }\n                            }\n                            var expectedTypesMessage = expectedTypes.length > 0 ? \", expected one of type [\" + expectedTypes.join(\", \") + \"]\" : \"\";\n                            return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` supplied to \" + (\"`\" + componentName + \"`\" + expectedTypesMessage + \".\"));\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function createNodeChecker() {\n                        function validate(props, propName, componentName, location, propFullName) {\n                            if (!isNode(props[propName])) {\n                                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` supplied to \" + (\"`\" + componentName + \"`, expected a ReactNode.\"));\n                            }\n                            return null;\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function invalidValidatorError(componentName, location, propFullName, key, type) {\n                        return new PropTypeError((componentName || \"React class\") + \": \" + location + \" type `\" + propFullName + \".\" + key + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + type + \"`.\");\n                    }\n                    function createShapeTypeChecker(shapeTypes) {\n                        function validate(props, propName, componentName, location, propFullName) {\n                            var propValue = props[propName];\n                            var propType = getPropType(propValue);\n                            if (propType !== \"object\") {\n                                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type `\" + propType + \"` \" + (\"supplied to `\" + componentName + \"`, expected `object`.\"));\n                            }\n                            for(var key in shapeTypes){\n                                var checker = shapeTypes[key];\n                                if (typeof checker !== \"function\") {\n                                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n                                }\n                                var error = checker(propValue, key, componentName, location, propFullName + \".\" + key, ReactPropTypesSecret);\n                                if (error) {\n                                    return error;\n                                }\n                            }\n                            return null;\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function createStrictShapeTypeChecker(shapeTypes) {\n                        function validate(props, propName, componentName, location, propFullName) {\n                            var propValue = props[propName];\n                            var propType = getPropType(propValue);\n                            if (propType !== \"object\") {\n                                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type `\" + propType + \"` \" + (\"supplied to `\" + componentName + \"`, expected `object`.\"));\n                            }\n                            // We need to check all keys in case some are required but missing from props.\n                            var allKeys = assign({}, props[propName], shapeTypes);\n                            for(var key in allKeys){\n                                var checker = shapeTypes[key];\n                                if (has(shapeTypes, key) && typeof checker !== \"function\") {\n                                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n                                }\n                                if (!checker) {\n                                    return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` key `\" + key + \"` supplied to `\" + componentName + \"`.\" + \"\\nBad object: \" + JSON.stringify(props[propName], null, \"  \") + \"\\nValid keys: \" + JSON.stringify(Object.keys(shapeTypes), null, \"  \"));\n                                }\n                                var error = checker(propValue, key, componentName, location, propFullName + \".\" + key, ReactPropTypesSecret);\n                                if (error) {\n                                    return error;\n                                }\n                            }\n                            return null;\n                        }\n                        return createChainableTypeChecker(validate);\n                    }\n                    function isNode(propValue) {\n                        switch(typeof propValue){\n                            case \"number\":\n                            case \"string\":\n                            case \"undefined\":\n                                return true;\n                            case \"boolean\":\n                                return !propValue;\n                            case \"object\":\n                                if (Array.isArray(propValue)) {\n                                    return propValue.every(isNode);\n                                }\n                                if (propValue === null || isValidElement(propValue)) {\n                                    return true;\n                                }\n                                var iteratorFn = getIteratorFn(propValue);\n                                if (iteratorFn) {\n                                    var iterator = iteratorFn.call(propValue);\n                                    var step;\n                                    if (iteratorFn !== propValue.entries) {\n                                        while(!(step = iterator.next()).done){\n                                            if (!isNode(step.value)) {\n                                                return false;\n                                            }\n                                        }\n                                    } else {\n                                        // Iterator will provide entry [k,v] tuples rather than values.\n                                        while(!(step = iterator.next()).done){\n                                            var entry = step.value;\n                                            if (entry) {\n                                                if (!isNode(entry[1])) {\n                                                    return false;\n                                                }\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    return false;\n                                }\n                                return true;\n                            default:\n                                return false;\n                        }\n                    }\n                    function isSymbol(propType, propValue) {\n                        // Native Symbol.\n                        if (propType === \"symbol\") {\n                            return true;\n                        }\n                        // falsy value can't be a Symbol\n                        if (!propValue) {\n                            return false;\n                        }\n                        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n                        if (propValue[\"@@toStringTag\"] === \"Symbol\") {\n                            return true;\n                        }\n                        // Fallback for non-spec compliant Symbols which are polyfilled.\n                        if (typeof Symbol === \"function\" && propValue instanceof Symbol) {\n                            return true;\n                        }\n                        return false;\n                    }\n                    // Equivalent of `typeof` but with special handling for array and regexp.\n                    function getPropType(propValue) {\n                        var propType = typeof propValue;\n                        if (Array.isArray(propValue)) {\n                            return \"array\";\n                        }\n                        if (propValue instanceof RegExp) {\n                            // Old webkits (at least until Android 4.0) return 'function' rather than\n                            // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n                            // passes PropTypes.object.\n                            return \"object\";\n                        }\n                        if (isSymbol(propType, propValue)) {\n                            return \"symbol\";\n                        }\n                        return propType;\n                    }\n                    // This handles more types than `getPropType`. Only used for error messages.\n                    // See `createPrimitiveTypeChecker`.\n                    function getPreciseType(propValue) {\n                        if (typeof propValue === \"undefined\" || propValue === null) {\n                            return \"\" + propValue;\n                        }\n                        var propType = getPropType(propValue);\n                        if (propType === \"object\") {\n                            if (propValue instanceof Date) {\n                                return \"date\";\n                            } else if (propValue instanceof RegExp) {\n                                return \"regexp\";\n                            }\n                        }\n                        return propType;\n                    }\n                    // Returns a string that is postfixed to a warning about an invalid type.\n                    // For example, \"undefined\" or \"of type array\"\n                    function getPostfixForTypeWarning(value) {\n                        var type = getPreciseType(value);\n                        switch(type){\n                            case \"array\":\n                            case \"object\":\n                                return \"an \" + type;\n                            case \"boolean\":\n                            case \"date\":\n                            case \"regexp\":\n                                return \"a \" + type;\n                            default:\n                                return type;\n                        }\n                    }\n                    // Returns class name of the object, if any.\n                    function getClassName(propValue) {\n                        if (!propValue.constructor || !propValue.constructor.name) {\n                            return ANONYMOUS;\n                        }\n                        return propValue.constructor.name;\n                    }\n                    ReactPropTypes.checkPropTypes = checkPropTypes;\n                    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n                    ReactPropTypes.PropTypes = ReactPropTypes;\n                    return ReactPropTypes;\n                };\n            /***/ },\n            /***/ \"./node_modules/prop-types/index.js\": /*!******************************************!*\\\n  !*** ./node_modules/prop-types/index.js ***!\n  \\******************************************/ /***/ (module1, __unused_webpack_exports, __nested_webpack_require_53393__)=>{\n                /**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ if (true) {\n                    var ReactIs = __nested_webpack_require_53393__(/*! react-is */ \"./node_modules/react-is/index.js\");\n                    // By explicitly using `prop-types` you are opting into new development behavior.\n                    // http://fb.me/prop-types-in-prod\n                    var throwOnDirectAccess = true;\n                    module1.exports = __nested_webpack_require_53393__(/*! ./factoryWithTypeCheckers */ \"./node_modules/prop-types/factoryWithTypeCheckers.js\")(ReactIs.isElement, throwOnDirectAccess);\n                } else {}\n            /***/ },\n            /***/ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\": /*!*************************************************************!*\\\n  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!\n  \\*************************************************************/ /***/ (module1)=>{\n                \"use strict\";\n                /**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var ReactPropTypesSecret = \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\";\n                module1.exports = ReactPropTypesSecret;\n            /***/ },\n            /***/ \"./node_modules/prop-types/lib/has.js\": /*!********************************************!*\\\n  !*** ./node_modules/prop-types/lib/has.js ***!\n  \\********************************************/ /***/ (module1)=>{\n                module1.exports = Function.call.bind(Object.prototype.hasOwnProperty);\n            /***/ },\n            /***/ \"./node_modules/react-is/cjs/react-is.development.js\": /*!***********************************************************!*\\\n  !*** ./node_modules/react-is/cjs/react-is.development.js ***!\n  \\***********************************************************/ /***/ (__unused_webpack_module, exports1)=>{\n                \"use strict\";\n                /** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ if (true) {\n                    (function() {\n                        \"use strict\";\n                        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n                        // nor polyfill, then a plain number is used for performance.\n                        var hasSymbol = typeof Symbol === \"function\" && Symbol.for;\n                        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for(\"react.element\") : 0xeac7;\n                        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for(\"react.portal\") : 0xeaca;\n                        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for(\"react.fragment\") : 0xeacb;\n                        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for(\"react.strict_mode\") : 0xeacc;\n                        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for(\"react.profiler\") : 0xead2;\n                        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for(\"react.provider\") : 0xeacd;\n                        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for(\"react.context\") : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n                        // (unstable) APIs that have been removed. Can we remove the symbols?\n                        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for(\"react.async_mode\") : 0xeacf;\n                        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for(\"react.concurrent_mode\") : 0xeacf;\n                        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for(\"react.forward_ref\") : 0xead0;\n                        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for(\"react.suspense\") : 0xead1;\n                        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for(\"react.suspense_list\") : 0xead8;\n                        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for(\"react.memo\") : 0xead3;\n                        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for(\"react.lazy\") : 0xead4;\n                        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for(\"react.block\") : 0xead9;\n                        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for(\"react.fundamental\") : 0xead5;\n                        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for(\"react.responder\") : 0xead6;\n                        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for(\"react.scope\") : 0xead7;\n                        function isValidElementType(type) {\n                            return typeof type === \"string\" || typeof type === \"function\" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n                            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === \"object\" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n                        }\n                        function typeOf(object) {\n                            if (typeof object === \"object\" && object !== null) {\n                                var $$typeof = object.$$typeof;\n                                switch($$typeof){\n                                    case REACT_ELEMENT_TYPE:\n                                        var type = object.type;\n                                        switch(type){\n                                            case REACT_ASYNC_MODE_TYPE:\n                                            case REACT_CONCURRENT_MODE_TYPE:\n                                            case REACT_FRAGMENT_TYPE:\n                                            case REACT_PROFILER_TYPE:\n                                            case REACT_STRICT_MODE_TYPE:\n                                            case REACT_SUSPENSE_TYPE:\n                                                return type;\n                                            default:\n                                                var $$typeofType = type && type.$$typeof;\n                                                switch($$typeofType){\n                                                    case REACT_CONTEXT_TYPE:\n                                                    case REACT_FORWARD_REF_TYPE:\n                                                    case REACT_LAZY_TYPE:\n                                                    case REACT_MEMO_TYPE:\n                                                    case REACT_PROVIDER_TYPE:\n                                                        return $$typeofType;\n                                                    default:\n                                                        return $$typeof;\n                                                }\n                                        }\n                                    case REACT_PORTAL_TYPE:\n                                        return $$typeof;\n                                }\n                            }\n                            return undefined;\n                        } // AsyncMode is deprecated along with isAsyncMode\n                        var AsyncMode = REACT_ASYNC_MODE_TYPE;\n                        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\n                        var ContextConsumer = REACT_CONTEXT_TYPE;\n                        var ContextProvider = REACT_PROVIDER_TYPE;\n                        var Element = REACT_ELEMENT_TYPE;\n                        var ForwardRef = REACT_FORWARD_REF_TYPE;\n                        var Fragment = REACT_FRAGMENT_TYPE;\n                        var Lazy = REACT_LAZY_TYPE;\n                        var Memo = REACT_MEMO_TYPE;\n                        var Portal = REACT_PORTAL_TYPE;\n                        var Profiler = REACT_PROFILER_TYPE;\n                        var StrictMode = REACT_STRICT_MODE_TYPE;\n                        var Suspense = REACT_SUSPENSE_TYPE;\n                        var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n                        function isAsyncMode(object) {\n                            {\n                                if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n                                    hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n                                    console[\"warn\"](\"The ReactIs.isAsyncMode() alias has been deprecated, \" + \"and will be removed in React 17+. Update your code to use \" + \"ReactIs.isConcurrentMode() instead. It has the exact same API.\");\n                                }\n                            }\n                            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n                        }\n                        function isConcurrentMode(object) {\n                            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n                        }\n                        function isContextConsumer(object) {\n                            return typeOf(object) === REACT_CONTEXT_TYPE;\n                        }\n                        function isContextProvider(object) {\n                            return typeOf(object) === REACT_PROVIDER_TYPE;\n                        }\n                        function isElement(object) {\n                            return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n                        }\n                        function isForwardRef(object) {\n                            return typeOf(object) === REACT_FORWARD_REF_TYPE;\n                        }\n                        function isFragment(object) {\n                            return typeOf(object) === REACT_FRAGMENT_TYPE;\n                        }\n                        function isLazy(object) {\n                            return typeOf(object) === REACT_LAZY_TYPE;\n                        }\n                        function isMemo(object) {\n                            return typeOf(object) === REACT_MEMO_TYPE;\n                        }\n                        function isPortal(object) {\n                            return typeOf(object) === REACT_PORTAL_TYPE;\n                        }\n                        function isProfiler(object) {\n                            return typeOf(object) === REACT_PROFILER_TYPE;\n                        }\n                        function isStrictMode(object) {\n                            return typeOf(object) === REACT_STRICT_MODE_TYPE;\n                        }\n                        function isSuspense(object) {\n                            return typeOf(object) === REACT_SUSPENSE_TYPE;\n                        }\n                        exports1.AsyncMode = AsyncMode;\n                        exports1.ConcurrentMode = ConcurrentMode;\n                        exports1.ContextConsumer = ContextConsumer;\n                        exports1.ContextProvider = ContextProvider;\n                        exports1.Element = Element;\n                        exports1.ForwardRef = ForwardRef;\n                        exports1.Fragment = Fragment;\n                        exports1.Lazy = Lazy;\n                        exports1.Memo = Memo;\n                        exports1.Portal = Portal;\n                        exports1.Profiler = Profiler;\n                        exports1.StrictMode = StrictMode;\n                        exports1.Suspense = Suspense;\n                        exports1.isAsyncMode = isAsyncMode;\n                        exports1.isConcurrentMode = isConcurrentMode;\n                        exports1.isContextConsumer = isContextConsumer;\n                        exports1.isContextProvider = isContextProvider;\n                        exports1.isElement = isElement;\n                        exports1.isForwardRef = isForwardRef;\n                        exports1.isFragment = isFragment;\n                        exports1.isLazy = isLazy;\n                        exports1.isMemo = isMemo;\n                        exports1.isPortal = isPortal;\n                        exports1.isProfiler = isProfiler;\n                        exports1.isStrictMode = isStrictMode;\n                        exports1.isSuspense = isSuspense;\n                        exports1.isValidElementType = isValidElementType;\n                        exports1.typeOf = typeOf;\n                    })();\n                }\n            /***/ },\n            /***/ \"./node_modules/react-is/index.js\": /*!****************************************!*\\\n  !*** ./node_modules/react-is/index.js ***!\n  \\****************************************/ /***/ (module1, __unused_webpack_exports, __nested_webpack_require_66664__)=>{\n                \"use strict\";\n                if (false) {} else {\n                    module1.exports = __nested_webpack_require_66664__(/*! ./cjs/react-is.development.js */ \"./node_modules/react-is/cjs/react-is.development.js\");\n                }\n            /***/ },\n            /***/ \"./node_modules/shallow-equal/dist/index.esm.js\": /*!******************************************************!*\\\n  !*** ./node_modules/shallow-equal/dist/index.esm.js ***!\n  \\******************************************************/ /***/ (__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_67245__)=>{\n                \"use strict\";\n                __nested_webpack_require_67245__.r(__nested_webpack_exports__);\n                /* harmony export */ __nested_webpack_require_67245__.d(__nested_webpack_exports__, {\n                    /* harmony export */ \"shallowEqualArrays\": ()=>/* binding */ shallowEqualArrays,\n                    /* harmony export */ \"shallowEqualObjects\": ()=>/* binding */ shallowEqualObjects\n                });\n                function shallowEqualObjects(objA, objB) {\n                    if (objA === objB) {\n                        return true;\n                    }\n                    if (!objA || !objB) {\n                        return false;\n                    }\n                    var aKeys = Object.keys(objA);\n                    var bKeys = Object.keys(objB);\n                    var len = aKeys.length;\n                    if (bKeys.length !== len) {\n                        return false;\n                    }\n                    for(var i = 0; i < len; i++){\n                        var key = aKeys[i];\n                        if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n                function shallowEqualArrays(arrA, arrB) {\n                    if (arrA === arrB) {\n                        return true;\n                    }\n                    if (!arrA || !arrB) {\n                        return false;\n                    }\n                    var len = arrA.length;\n                    if (arrB.length !== len) {\n                        return false;\n                    }\n                    for(var i = 0; i < len; i++){\n                        if (arrA[i] !== arrB[i]) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n            /***/ },\n            /***/ \"./src/Component.ts\": /*!**************************!*\\\n  !*** ./src/Component.ts ***!\n  \\**************************/ /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_69379__) {\n                \"use strict\";\n                var __rest = this && this.__rest || function(s, e) {\n                    var t = {};\n                    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n                    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n                    }\n                    return t;\n                };\n                var __importDefault = this && this.__importDefault || function(mod) {\n                    return mod && mod.__esModule ? mod : {\n                        \"default\": mod\n                    };\n                };\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var useMediaQuery_1 = __importDefault(__nested_webpack_require_69379__(/*! ./useMediaQuery */ \"./src/useMediaQuery.ts\"));\n                // ReactNode and ReactElement typings are a little funky for functional components, so the ReactElement cast is needed on the return\n                var MediaQuery = function(_a) {\n                    var children = _a.children, device = _a.device, onChange = _a.onChange, settings = __rest(_a, [\n                        \"children\",\n                        \"device\",\n                        \"onChange\"\n                    ]);\n                    var matches = (0, useMediaQuery_1.default)(settings, device, onChange);\n                    if (typeof children === \"function\") {\n                        return children(matches);\n                    }\n                    return matches ? children : null;\n                };\n                exports1[\"default\"] = MediaQuery;\n            /***/ },\n            /***/ \"./src/Context.ts\": /*!************************!*\\\n  !*** ./src/Context.ts ***!\n  \\************************/ /***/ (__unused_webpack_module, exports1, __nested_webpack_require_71448__)=>{\n                \"use strict\";\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var react_1 = __nested_webpack_require_71448__(/*! react */ \"react\");\n                var Context = (0, react_1.createContext)(undefined);\n                exports1[\"default\"] = Context;\n            /***/ },\n            /***/ \"./src/index.ts\": /*!**********************!*\\\n  !*** ./src/index.ts ***!\n  \\**********************/ /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_71997__) {\n                \"use strict\";\n                var __importDefault = this && this.__importDefault || function(mod) {\n                    return mod && mod.__esModule ? mod : {\n                        \"default\": mod\n                    };\n                };\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.Context = exports1.toQuery = exports1.useMediaQuery = exports1[\"default\"] = void 0;\n                var useMediaQuery_1 = __importDefault(__nested_webpack_require_71997__(/*! ./useMediaQuery */ \"./src/useMediaQuery.ts\"));\n                exports1.useMediaQuery = useMediaQuery_1.default;\n                var Component_1 = __importDefault(__nested_webpack_require_71997__(/*! ./Component */ \"./src/Component.ts\"));\n                exports1[\"default\"] = Component_1.default;\n                var toQuery_1 = __importDefault(__nested_webpack_require_71997__(/*! ./toQuery */ \"./src/toQuery.ts\"));\n                exports1.toQuery = toQuery_1.default;\n                var Context_1 = __importDefault(__nested_webpack_require_71997__(/*! ./Context */ \"./src/Context.ts\"));\n                exports1.Context = Context_1.default;\n            /***/ },\n            /***/ \"./src/mediaQuery.ts\": /*!***************************!*\\\n  !*** ./src/mediaQuery.ts ***!\n  \\***************************/ /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_73396__) {\n                \"use strict\";\n                var __assign = this && this.__assign || function() {\n                    __assign = Object.assign || function(t) {\n                        for(var s, i = 1, n = arguments.length; i < n; i++){\n                            s = arguments[i];\n                            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n                        }\n                        return t;\n                    };\n                    return __assign.apply(this, arguments);\n                };\n                var __rest = this && this.__rest || function(s, e) {\n                    var t = {};\n                    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n                    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n                    }\n                    return t;\n                };\n                var __importDefault = this && this.__importDefault || function(mod) {\n                    return mod && mod.__esModule ? mod : {\n                        \"default\": mod\n                    };\n                };\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var prop_types_1 = __importDefault(__nested_webpack_require_73396__(/*! prop-types */ \"./node_modules/prop-types/index.js\"));\n                var stringOrNumber = prop_types_1.default.oneOfType([\n                    prop_types_1.default.string,\n                    prop_types_1.default.number\n                ]);\n                // media types\n                var types = {\n                    all: prop_types_1.default.bool,\n                    grid: prop_types_1.default.bool,\n                    aural: prop_types_1.default.bool,\n                    braille: prop_types_1.default.bool,\n                    handheld: prop_types_1.default.bool,\n                    print: prop_types_1.default.bool,\n                    projection: prop_types_1.default.bool,\n                    screen: prop_types_1.default.bool,\n                    tty: prop_types_1.default.bool,\n                    tv: prop_types_1.default.bool,\n                    embossed: prop_types_1.default.bool\n                };\n                // properties that match media queries\n                var matchers = {\n                    orientation: prop_types_1.default.oneOf([\n                        \"portrait\",\n                        \"landscape\"\n                    ]),\n                    scan: prop_types_1.default.oneOf([\n                        \"progressive\",\n                        \"interlace\"\n                    ]),\n                    aspectRatio: prop_types_1.default.string,\n                    deviceAspectRatio: prop_types_1.default.string,\n                    height: stringOrNumber,\n                    deviceHeight: stringOrNumber,\n                    width: stringOrNumber,\n                    deviceWidth: stringOrNumber,\n                    color: prop_types_1.default.bool,\n                    colorIndex: prop_types_1.default.bool,\n                    monochrome: prop_types_1.default.bool,\n                    resolution: stringOrNumber,\n                    type: Object.keys(types)\n                };\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                var type = matchers.type, featureMatchers = __rest(matchers, [\n                    \"type\"\n                ]);\n                // media features\n                var features = __assign({\n                    minAspectRatio: prop_types_1.default.string,\n                    maxAspectRatio: prop_types_1.default.string,\n                    minDeviceAspectRatio: prop_types_1.default.string,\n                    maxDeviceAspectRatio: prop_types_1.default.string,\n                    minHeight: stringOrNumber,\n                    maxHeight: stringOrNumber,\n                    minDeviceHeight: stringOrNumber,\n                    maxDeviceHeight: stringOrNumber,\n                    minWidth: stringOrNumber,\n                    maxWidth: stringOrNumber,\n                    minDeviceWidth: stringOrNumber,\n                    maxDeviceWidth: stringOrNumber,\n                    minColor: prop_types_1.default.number,\n                    maxColor: prop_types_1.default.number,\n                    minColorIndex: prop_types_1.default.number,\n                    maxColorIndex: prop_types_1.default.number,\n                    minMonochrome: prop_types_1.default.number,\n                    maxMonochrome: prop_types_1.default.number,\n                    minResolution: stringOrNumber,\n                    maxResolution: stringOrNumber\n                }, featureMatchers);\n                var all = __assign(__assign({}, types), features);\n                exports1[\"default\"] = {\n                    all: all,\n                    types: types,\n                    matchers: matchers,\n                    features: features\n                };\n            /***/ },\n            /***/ \"./src/toQuery.ts\": /*!************************!*\\\n  !*** ./src/toQuery.ts ***!\n  \\************************/ /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_78805__) {\n                \"use strict\";\n                var __importDefault = this && this.__importDefault || function(mod) {\n                    return mod && mod.__esModule ? mod : {\n                        \"default\": mod\n                    };\n                };\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var hyphenate_style_name_1 = __importDefault(__nested_webpack_require_78805__(/*! hyphenate-style-name */ \"./node_modules/hyphenate-style-name/index.js\"));\n                var mediaQuery_1 = __importDefault(__nested_webpack_require_78805__(/*! ./mediaQuery */ \"./src/mediaQuery.ts\"));\n                var negate = function(cond) {\n                    return \"not \".concat(cond);\n                };\n                var keyVal = function(k, v) {\n                    var realKey = (0, hyphenate_style_name_1.default)(k);\n                    // px shorthand\n                    if (typeof v === \"number\") {\n                        v = \"\".concat(v, \"px\");\n                    }\n                    if (v === true) {\n                        return realKey;\n                    }\n                    if (v === false) {\n                        return negate(realKey);\n                    }\n                    return \"(\".concat(realKey, \": \").concat(v, \")\");\n                };\n                var join = function(conds) {\n                    return conds.join(\" and \");\n                };\n                var toQuery = function(obj) {\n                    var rules = [];\n                    Object.keys(mediaQuery_1.default.all).forEach(function(k) {\n                        var v = obj[k];\n                        if (v != null) {\n                            rules.push(keyVal(k, v));\n                        }\n                    });\n                    return join(rules);\n                };\n                exports1[\"default\"] = toQuery;\n            /***/ },\n            /***/ \"./src/useMediaQuery.ts\": /*!******************************!*\\\n  !*** ./src/useMediaQuery.ts ***!\n  \\******************************/ /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_80947__) {\n                \"use strict\";\n                var __importDefault = this && this.__importDefault || function(mod) {\n                    return mod && mod.__esModule ? mod : {\n                        \"default\": mod\n                    };\n                };\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                var react_1 = __nested_webpack_require_80947__(/*! react */ \"react\");\n                var matchmediaquery_1 = __importDefault(__nested_webpack_require_80947__(/*! matchmediaquery */ \"./node_modules/matchmediaquery/index.js\"));\n                var hyphenate_style_name_1 = __importDefault(__nested_webpack_require_80947__(/*! hyphenate-style-name */ \"./node_modules/hyphenate-style-name/index.js\"));\n                var shallow_equal_1 = __nested_webpack_require_80947__(/*! shallow-equal */ \"./node_modules/shallow-equal/dist/index.esm.js\");\n                var toQuery_1 = __importDefault(__nested_webpack_require_80947__(/*! ./toQuery */ \"./src/toQuery.ts\"));\n                var Context_1 = __importDefault(__nested_webpack_require_80947__(/*! ./Context */ \"./src/Context.ts\"));\n                var makeQuery = function(settings) {\n                    return settings.query || (0, toQuery_1.default)(settings);\n                };\n                var hyphenateKeys = function(obj) {\n                    if (!obj) return undefined;\n                    var keys = Object.keys(obj);\n                    return keys.reduce(function(result, key) {\n                        result[(0, hyphenate_style_name_1.default)(key)] = obj[key];\n                        return result;\n                    }, {});\n                };\n                var useIsUpdate = function() {\n                    var ref = (0, react_1.useRef)(false);\n                    (0, react_1.useEffect)(function() {\n                        ref.current = true;\n                    }, []);\n                    return ref.current;\n                };\n                var useDevice = function(deviceFromProps) {\n                    var deviceFromContext = (0, react_1.useContext)(Context_1.default);\n                    var getDevice = function() {\n                        return hyphenateKeys(deviceFromProps) || hyphenateKeys(deviceFromContext);\n                    };\n                    var _a = (0, react_1.useState)(getDevice), device = _a[0], setDevice = _a[1];\n                    (0, react_1.useEffect)(function() {\n                        var newDevice = getDevice();\n                        if (!(0, shallow_equal_1.shallowEqualObjects)(device, newDevice)) {\n                            setDevice(newDevice);\n                        }\n                    }, [\n                        deviceFromProps,\n                        deviceFromContext\n                    ]);\n                    return device;\n                };\n                var useQuery = function(settings) {\n                    var getQuery = function() {\n                        return makeQuery(settings);\n                    };\n                    var _a = (0, react_1.useState)(getQuery), query = _a[0], setQuery = _a[1];\n                    (0, react_1.useEffect)(function() {\n                        var newQuery = getQuery();\n                        if (query !== newQuery) {\n                            setQuery(newQuery);\n                        }\n                    }, [\n                        settings\n                    ]);\n                    return query;\n                };\n                var useMatchMedia = function(query, device) {\n                    var getMatchMedia = function() {\n                        return (0, matchmediaquery_1.default)(query, device || {}, !!device);\n                    };\n                    var _a = (0, react_1.useState)(getMatchMedia), mq = _a[0], setMq = _a[1];\n                    var isUpdate = useIsUpdate();\n                    (0, react_1.useEffect)(function() {\n                        if (isUpdate) {\n                            // skip on mounting, it has already been set\n                            var newMq_1 = getMatchMedia();\n                            setMq(newMq_1);\n                            return function() {\n                                if (newMq_1) {\n                                    newMq_1.dispose();\n                                }\n                            };\n                        }\n                    }, [\n                        query,\n                        device\n                    ]);\n                    return mq;\n                };\n                var useMatches = function(mediaQuery) {\n                    var _a = (0, react_1.useState)(mediaQuery.matches), matches = _a[0], setMatches = _a[1];\n                    (0, react_1.useEffect)(function() {\n                        var updateMatches = function(ev) {\n                            setMatches(ev.matches);\n                        };\n                        mediaQuery.addListener(updateMatches);\n                        setMatches(mediaQuery.matches);\n                        return function() {\n                            mediaQuery.removeListener(updateMatches);\n                        };\n                    }, [\n                        mediaQuery\n                    ]);\n                    return matches;\n                };\n                var useMediaQuery = function(settings, device, onChange) {\n                    var deviceSettings = useDevice(device);\n                    var query = useQuery(settings);\n                    if (!query) throw new Error(\"Invalid or missing MediaQuery!\");\n                    var mq = useMatchMedia(query, deviceSettings);\n                    var matches = useMatches(mq);\n                    var isUpdate = useIsUpdate();\n                    (0, react_1.useEffect)(function() {\n                        if (isUpdate && onChange) {\n                            onChange(matches);\n                        }\n                    }, [\n                        matches\n                    ]);\n                    (0, react_1.useEffect)(function() {\n                        return function() {\n                            if (mq) {\n                                mq.dispose();\n                            }\n                        };\n                    }, []);\n                    return matches;\n                };\n                exports1[\"default\"] = useMediaQuery;\n            /***/ },\n            /***/ \"react\": /*!**************************************************************************************!*\\\n  !*** external {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"} ***!\n  \\**************************************************************************************/ /***/ (module1)=>{\n                \"use strict\";\n                module1.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n            /***/ }\n        };\n        /************************************************************************/ /******/ // The module cache\n        /******/ var __webpack_module_cache__ = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_87991__(moduleId) {\n            /******/ // Check if module is in cache\n            /******/ var cachedModule = __webpack_module_cache__[moduleId];\n            /******/ if (cachedModule !== undefined) {\n                /******/ return cachedModule.exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = __webpack_module_cache__[moduleId] = {\n                /******/ // no module.id needed\n                /******/ // no module.loaded needed\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ __webpack_modules__[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_87991__);\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /************************************************************************/ /******/ /* webpack/runtime/define property getters */ /******/ (()=>{\n            /******/ // define getter functions for harmony exports\n            /******/ __nested_webpack_require_87991__.d = (exports1, definition)=>{\n                /******/ for(var key in definition){\n                    /******/ if (__nested_webpack_require_87991__.o(definition, key) && !__nested_webpack_require_87991__.o(exports1, key)) {\n                        /******/ Object.defineProperty(exports1, key, {\n                            enumerable: true,\n                            get: definition[key]\n                        });\n                    /******/ }\n                /******/ }\n            /******/ };\n        /******/ })();\n        /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ (()=>{\n            /******/ __nested_webpack_require_87991__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);\n        /******/ })();\n        /******/ /******/ /* webpack/runtime/make namespace object */ /******/ (()=>{\n            /******/ // define __esModule on exports\n            /******/ __nested_webpack_require_87991__.r = (exports1)=>{\n                /******/ if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n                    /******/ Object.defineProperty(exports1, Symbol.toStringTag, {\n                        value: \"Module\"\n                    });\n                /******/ }\n                /******/ Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n            /******/ };\n        /******/ })();\n        /******/ /************************************************************************/ /******/ /******/ // startup\n        /******/ // Load entry module and return exports\n        /******/ // This entry module is referenced by other modules so it can't be inlined\n        /******/ var __nested_webpack_exports__ = __nested_webpack_require_87991__(\"./src/index.ts\");\n        /******/ /******/ return __nested_webpack_exports__;\n    /******/ })();\n}); //# sourceMappingURL=react-responsive.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-responsive/dist/react-responsive.js\n");

/***/ })

};
;